plugins {
    id("com.github.johnrengelman.shadow")
    id("io.micronaut.application")
    id("org.unbroken-dome.test-sets") version '4.0.0'
    //id("com.google.cloud.artifactregistry.gradle-plugin") version "2.1.5"
}

group = "com.tolamearth.harmm"

repositories {
//    maven {
//        url "artifactregistry://us-central1-maven.pkg.dev/armm-sandbox/oci-maven"
//    }
    mavenCentral()
}

testSets {
    dockerizedTest
}
tasks.withType(Test) {
    environment "GOOGLE_CLOUD_PROJECT","hem-integration-services"
    testLogging.showStandardStreams = Boolean.parseBoolean(findProperty('showStandardStreams'))
}

dependencies {
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    implementation project(":armm-common")
    implementation("io.micronaut.reactor:micronaut-reactor")
    //implementation("com.tolamearth:message-schemas:1.0.0-SNAPSHOT")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.gcp:micronaut-gcp-pubsub")
    implementation("jakarta.annotation:jakarta.annotation-api")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("org.testcontainers:gcloud:1.17.3")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.liquibase:micronaut-liquibase")
    implementation("io.micronaut.gcp:micronaut-gcp-logging:4.5.0")
    testImplementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.4')
    testImplementation('org.mockito:mockito-core:4.8.0')
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.4')
    testImplementation("com.h2database:h2")
    testImplementation("org.yaml:snakeyaml:1.30")
    runtimeOnly("org.postgresql:postgresql")
}

application {
    mainClass.set("com.tolamearth.armm.pipeline.OrchestrationApp")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.tolamearth.harmm.*")
    }
}

dockerBuild {
    images = ["orchestrator-daemon:latest"]
}

tasks.named("dockerfile") {
    baseImage = "amazoncorretto:17"
}

task dockerBuildxImage(type:Exec) {
    group 'docker'
    dependsOn dockerBuild
    workingDir "${project.projectDir}/build/docker/main"
    executable 'docker'
    args = ['buildx', 'build', '--platform', 'linux/amd64,linux/arm64', '-t', "us-central1-docker.pkg.dev/armm-sandbox/hem-armm/orchestrator-daemon:$project.version", '-t', "us-central1-docker.pkg.dev/armm-sandbox/hem-armm/orchestrator-daemon:latest", '--push', '.']
}


